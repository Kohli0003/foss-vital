name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run code quality checks
      run: npm run check

    - name: Build project
      run: npm run build

    - name: Test build output
      run: |
        ls -la dist/
        node -e "console.log('Build successful!')"

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t foss-vital:${{ github.sha }} -t foss-vital:latest .
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container -p 3000:3000 foss-vital:latest
        
        # Function to cleanup container
        cleanup() {
          echo "Cleaning up container..."
          docker stop test-container 2>/dev/null || true
          docker rm test-container 2>/dev/null || true
        }
        
        # Set trap to cleanup on exit
        trap cleanup EXIT
        
        # Wait for container to be ready and check health
        timeout=30
        while [ $timeout -gt 0 ]; do
          if docker exec test-container node -e "fetch('http://localhost:3000/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))" 2>/dev/null; then
            echo "Container is healthy!"
            echo "Docker build and health check successful!"
            exit 0
          fi
          echo "Waiting for container to be ready... ($timeout seconds left)"
          sleep 2
          timeout=$((timeout-2))
        done
        
        echo "Container failed to become healthy"
        docker logs test-container
        exit 1

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
